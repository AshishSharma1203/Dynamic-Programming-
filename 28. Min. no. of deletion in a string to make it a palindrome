28 Minimum number of deletion in a string to make it a palindrome
Video Link : https://youtu.be/CFwCCNbRuLY
GFG Practice Link : https://practice.geeksforgeeks.org/problems/minimum-number-of-deletions4610/1

Approach :-->>
 i). find the longest common pallindromic subsequence 
 ii). return the difference of it from lenght of string 
 
             ------->>>>>>>>>>>------------>>>>>>>>>>>>________CODE________<<<<<<<<<<<<------------<<<<<<<<<<<<<<<<<<<<<<<<<<<
             
             
             

int minDeletions(string str, int n) { 
    //complete the function here
    
    string a= str, b=str;
    
    reverse(b.begin(),b.end());
    
    int size= a.size(), size2= b.size();
    
   // declaration of the  the 2-D vector
   
    vector<vector<int>> t (size+1, vector<int> (size2+1)); 
	   
	 // filling the base case condition 
	   
	   for(int i=0;i<size+1;i++){
            t[i][0]=0;
            
        }
        
        for(int j=0;j<size2+1;j++)
        {
            t[0][j]=0;
        }
        
   // applying LCS concept by top-down method     
        for(int i=1;i<size+1;i++)
        {
            
            for(int j=1;j<size2+1;j++)
            {
                
                if(a[i-1]==b[j-1])
                {
                    t[i][j]=1+t[i-1][j-1];
                }
                else{
                    t[i][j]= max(t[i][j-1] , t[i-1][j]);
                }
                
            }
            
        }
        
	   int count= t[size][size2];
	   return n-count; 
    
  
    
} 
             
